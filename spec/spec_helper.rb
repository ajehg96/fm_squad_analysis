# This file was generated by the `rails generate rspec:install` command.
# It contains default settings for RSpec, and may be customized to
# your needs.
#
# For more information, see https://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for an implicit
    # subject. For example:
    #
    #   it { is_expected.to be_something }
    #
    # would produce the error message:
    #
    #   expected `something`.to be something
    #
    # rather than:
    #
    #   expected to be something
    #
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library if you prefer.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended.
    mocks.verify_partial_doubles = true
  end

  # This option will default to `true` in RSpec 4. It makes sure that the
  # `before` and `after` hooks executed for an example come from the spec
  # file that defines the example, rather than from a shared context defined
  # in a different file.
  #
  # For example, if you have a shared context defined in `spec/support/foo.rb`:
  #
  #   shared_context 'foo' do
  #     before { do_something_useful }
  #   end
  #
  # and you include that shared context in a spec file:
  #
  #   describe 'bar' do
  #     include_context 'foo'
  #
  #     it 'does something' do
  #       # ...
  #     end
  #   end
  #
  # then the `do_something_useful` hook will be executed before the example
  # in `spec/bar_spec.rb`.
  #
  # If you set this option to `false`, then the `do_something_useful` hook
  # would be executed before the example in `spec/support/foo.rb`.
  config.shared_context_metadata_behavior = :apply_to_host_groups

  # The settings below are suggested to provide a good balance of speed, and
  # enable you to use RSpec for productively. You can find more information
  # at https://rspec.info/documentation/3.12/rspec-core/RSpec/Core/Configuration.html
  # The original code was:
  # config.disable_monkey_patching!
  # config.warnings = true
  # config.profile_examples = 10
  # config.order = :random
  # Kernel.srand config.seed
end

# require 'stringio'
# require 'hungarian_algorithm'

# class HungarianAlgorithm
#   # Grab the original 'process' method before we overwrite it
#   original_process_method = instance_method(:process)

#   # Now, redefine the 'process' method
#   define_method(:process) do
#     original_stdout = $stdout
#     $stdout = StringIO.new # Redirect output
#     begin
#       # Bind the original method to the current instance (`self`) and call it
#       original_process_method.bind(self).call
#     ensure
#       # ALWAYS restore the original output stream
#       $stdout = original_stdout
#     end
#   end
# end
