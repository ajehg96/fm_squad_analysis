library(tm)
library(text2vec)
library(Matrix)
library(proxy)
library(vroom)
# Assume 'df' is your dataframe, and 'short_description' is the text column
text_data <- vroom("test_snow_data.csv")$result.short_description[1:50]
# Convert to corpus and clean the text
corpus <- Corpus(VectorSource(text_data))
corpus_clean <- tm_map(corpus, content_transformer(tolower))
corpus_clean <- tm_map(corpus_clean, removePunctuation)
corpus_clean <- tm_map(corpus_clean, removeNumbers)
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords("english"))
corpus_clean <- tm_map(corpus_clean, stripWhitespace)
# Convert to a document-term matrix (DTM)
dtm <- DocumentTermMatrix(corpus_clean)
# Convert the DTM to a sparse matrix (dgCMatrix)
sparse_dtm <- as(dtm, "sparseMatrix")
# Create the vocabulary and the vectorizer
vectorizer <- vocab_vectorizer(create_vocabulary(itoken(text_data)))
# Create the DTM using text2vec
tfidf <- TfIdf$new()
# Fit the TF-IDF model to the sparse DTM
tfidf_matrix <- tfidf$fit_transform(sparse_dtm)
# Compute cosine similarity between documents
cosine_sim <- proxy::simil(as.matrix(tfidf_matrix), method = "cosine")
# Convert to a matrix if needed
cosine_sim_matrix <- as.matrix(cosine_sim)
# Set a similarity threshold (e.g., 0.75)
threshold <- 0.75
clusters <- list()
# Loop through the cosine similarity matrix and group similar descriptions
for (i in 1:nrow(cosine_sim_matrix)) {
similar_items <- which(cosine_sim_matrix[i, ] > threshold)
clusters[[i]] <- text_data[similar_items]
}
# Print the clusters of similar descriptions
print(clusters)
View(corpus_clean)
corpus_clean[["1"]][["content"]]
corpus_clean[["1"]][["meta"]][["datetimestamp"]][[1]][[1]][[1]][[1]][[1]][[1]][[1]][[1]][[1]][[1]][[1]]
View(dtm)
dtm[["dimnames"]][["Terms"]]
View(sparse_dtm)
sparse_dtm
sparse_dtm@Dimnames
View(tfidf)
View(tfidf_matrix)
tfidf_matrix@x
View(vectorizer)
library(tidyverse)
# Assume 'df' is your dataframe, and 'short_description' is the text column
text_data <- vroom("test_snow_data.csv") %>%
select(result.short_description) %>%
mutate(description = tolower(result.short_description))
library(tm)
library(text2vec)
library(Matrix)
library(proxy)
library(vroom)
library(tidyverse)
# Assume 'df' is your dataframe, and 'short_description' is the text column
text_data <- vroom("test_snow_data.csv") %>%
select(result.short_description) %>%
mutate(description = tolower(result.short_description))
View(text_data)
# Assume 'df' is your dataframe, and 'short_description' is the text column
text_data <- vroom("test_snow_data.csv") %>%
select(result.short_description) %>%
mutate(description = tolower(result.short_description),
description_2 = removePunctuation(description))
# Assume 'df' is your dataframe, and 'short_description' is the text column
text_data <- vroom("test_snow_data.csv") %>%
select(result.short_description) %>%
mutate(description = tolower(result.short_description),
description_2 = str_replace_all("[^\\w\\s]", " "))
View(text_data)
# Assume 'df' is your dataframe, and 'short_description' is the text column
text_data <- vroom("test_snow_data.csv") %>%
select(result.short_description) %>%
mutate(description = tolower(result.short_description),
description_2 = str_replace_all("[^\\w\\s]", "\\s"))
# Assume 'df' is your dataframe, and 'short_description' is the text column
text_data <- vroom("test_snow_data.csv") %>%
select(result.short_description) %>%
mutate(description = tolower(result.short_description),
description_2 = str_replace_all(description, "[^\\w\\s]", ""))
# Assume 'df' is your dataframe, and 'short_description' is the text column
text_data <- vroom("test_snow_data.csv") %>%
select(result.short_description) %>%
mutate(description = tolower(result.short_description),
description_2 = str_replace_all(description, "[^\\w\\s]", "\\s"))
# Assume 'df' is your dataframe, and 'short_description' is the text column
text_data <- vroom("test_snow_data.csv") %>%
select(result.short_description) %>%
mutate(description = tolower(result.short_description),
description_2 = str_replace_all(description, "[^\\w\\s]", "b"))
# Assume 'df' is your dataframe, and 'short_description' is the text column
text_data <- vroom("test_snow_data.csv") %>%
select(result.short_description) %>%
mutate(description = tolower(result.short_description),
description_2 = str_replace_all(description, "[^\\w\\s]", "  "))
View(text_data)
# Assume 'df' is your dataframe, and 'short_description' is the text column
text_data <- vroom("test_snow_data.csv") %>%
select(result.short_description) %>%
mutate(description = tolower(result.short_description),
description_2 = str_replace_all(description, "[^\\w\\s]", " "))
View(text_data)
# Assume 'df' is your dataframe, and 'short_description' is the text column
text_data <- vroom("test_snow_data.csv") %>%
select(result.short_description) %>%
mutate(description = tolower(result.short_description),
description_2 = str_replace_all(str_replace_all(description, "[^\\w\\s]", " "), "\\s{2,}", " "))
View(text_data)
# Assume 'df' is your dataframe, and 'short_description' is the text column
text_data <- vroom("test_snow_data.csv") %>%
select(result.short_description) %>%
mutate(description = tolower(result.short_description),
description_2 = str_replace_all(str_replace_all(description, "[^\\w\\s]", " "), "\\s{2,}", " "),
description_2 = str_replace_all(str_replace_all(description, "[0-9]", " "), "\\s{2,}", " "),
)
View(text_data)
# Assume 'df' is your dataframe, and 'short_description' is the text column
text_data <- vroom("test_snow_data.csv") %>%
select(result.short_description) %>%
mutate(description = tolower(result.short_description),
description = str_replace_all(str_replace_all(description, "[^\\w\\s]", " "), "\\s{2,}", " "),
description = str_replace_all(str_replace_all(description, "[0-9]", " "), "\\s{2,}", " "))
View(text_data)
library(tm)
library(text2vec)
library(Matrix)
library(proxy)
library(vroom)
library(tidyverse)
# Assume 'df' is your dataframe, and 'short_description' is the text column
text_data <- vroom("test_snow_data.csv") %>%
select(result.short_description) %>%
mutate(description = tolower(result.short_description),
description = str_replace_all(description, "[^\\w\\s]", " "),
description = str_replace_all(description, "[0-9]", " "))
View(text_data)
library(tm)
library(text2vec)
library(Matrix)
library(proxy)
library(vroom)
library(tidyverse)
# Assume 'df' is your dataframe, and 'short_description' is the text column
text_data <- vroom("test_snow_data.csv") %>%
select(result.short_description) %>%
mutate(description = tolower(result.short_description),
description = str_replace_all(description, "[^\\w\\s]|\\_", " "),
description = str_replace_all(description, "[0-9]", " ")),
# Assume 'df' is your dataframe, and 'short_description' is the text column
text_data <- vroom("test_snow_data.csv") %>%
select(result.short_description) %>%
mutate(description = tolower(result.short_description),
description = str_replace_all(description, "[^\\w\\s]|\\_", " "),
description = str_replace_all(description, "[0-9]", " ")),
# Assume 'df' is your dataframe, and 'short_description' is the text column
text_data <- vroom("test_snow_data.csv") %>%
select(result.short_description) %>%
mutate(description = tolower(result.short_description),
description = str_replace_all(description, "[^\\w\\s]|\\_", " "),
description = str_replace_all(description, "[0-9]", " "),
description = str_replace_all(description, "\\s{2,}", " "))
source("~/R/footballManager/training.R")
View(first_team)
source("~/R/footballManager/training.R")
source("~/R/footballManager/training.R")
source("~/R/footballManager/training.R")
source("~/R/footballManager/training.R")
source("~/R/footballManager/training.R")
source("~/R/footballManager/training.R")
source("~/R/footballManager/training.R")
source("~/R/footballManager/training.R")
source("~/R/footballManager/training.R")
source("~/R/footballManager/training.R")
source("~/R/footballManager/training.R")
source("~/R/footballManager/training.R")
source("~/R/footballManager/import.R")
source("~/R/footballManager/import.R")
source("~/R/footballManager/import.R")
source("~/R/footballManager/import.R")
source("~/R/footballManager/import.R")
source("~/R/footballManager/import.R")
source("~/R/footballManager/search.R")
View(roles_search)
View(third_team)
source("~/R/footballManager/search.R")
source("~/R/footballManager/training.R")
source("~/R/footballManager/training.R")
source("~/R/footballManager/training.R")
source("~/R/footballManager/training.R")
source("~/R/footballManager/training.R")
source("~/R/footballManager/search.R")
source("~/R/footballManager/training.R")
source("~/R/footballManager/search.R")
source("~/R/footballManager/training.R")
source("~/R/footballManager/training.R")
source("~/R/footballManager/training.R")
source("~/R/footballManager/training.R")
source("~/R/footballManager/training.R")
View(roles_free)
View(roles_position)
source("~/.active-rstudio-document")
parse_squad <- function(path) {
htmlParse(path, encoding = "UTF-8") %>%
readHTMLTable() %>%
as.data.frame() %>%
filter(!if_any(8:50, ~ str_detect(.x, "-"))) %>%
select(
name = "NULL.Name", age = "NULL.Age", height = "NULL.Height", position = "NULL.Position",
foot_right = "NULL.Right.Foot", foot_left = "NULL.Left.Foot", potential = "NULL.PA", att_cor = "NULL.Cor",
att_cro = "NULL.Cro", att_dri = "NULL.Dri", att_fin = "NULL.Fin", att_fir = "NULL.Fir",
att_fre = "NULL.Fre", att_hea = "NULL.Hea", att_lon = "NULL.Lon", att_lth = "NULL.L.Th",
att_mar = "NULL.Mar", att_pas = "NULL.Pas", att_pen = "NULL.Pen", att_tck = "NULL.Tck",
att_tec = "NULL.Tec", att_agg = "NULL.Agg", att_ant = "NULL.Ant", att_bra = "NULL.Bra",
att_cmp = "NULL.Cmp", att_cnt = "NULL.Cnt", att_dec = "NULL.Dec", att_det = "NULL.Det",
att_fla = "NULL.Fla", att_ldr = "NULL.Ldr", att_otb = "NULL.OtB", att_pos = "NULL.Pos",
att_tea = "NULL.Tea", att_vis = "NULL.Vis", att_wor = "NULL.Wor", att_acc = "NULL.Acc",
att_agi = "NULL.Agi", att_bal = "NULL.Bal", att_jum = "NULL.Jum", att_nat = "NULL.Nat",
att_pac = "NULL.Pac", att_sta = "NULL.Sta", att_str = "NULL.Str", att_aer = "NULL.Aer",
att_cmd = "NULL.Cmd", att_com = "NULL.Com", att_ecc = "NULL.Ecc", att_han = "NULL.Han",
att_kic = "NULL.Kic", att_1v1 = "NULL.1v1", att_pun = "NULL.Pun", att_ref = "NULL.Ref",
att_tro = "NULL.TRO", att_thr = "NULL.Thr"
) %>%
m
parse_squad <- function(path) {
htmlParse(path, encoding = "UTF-8") %>%
readHTMLTable() %>%
as.data.frame() %>%
filter(!if_any(8:50, ~ str_detect(.x, "-"))) %>%
select(
name = "NULL.Name", age = "NULL.Age", height = "NULL.Height", position = "NULL.Position",
foot_right = "NULL.Right.Foot", foot_left = "NULL.Left.Foot", potential = "NULL.PA", att_cor = "NULL.Cor",
att_cro = "NULL.Cro", att_dri = "NULL.Dri", att_fin = "NULL.Fin", att_fir = "NULL.Fir",
att_fre = "NULL.Fre", att_hea = "NULL.Hea", att_lon = "NULL.Lon", att_lth = "NULL.L.Th",
att_mar = "NULL.Mar", att_pas = "NULL.Pas", att_pen = "NULL.Pen", att_tck = "NULL.Tck",
att_tec = "NULL.Tec", att_agg = "NULL.Agg", att_ant = "NULL.Ant", att_bra = "NULL.Bra",
att_cmp = "NULL.Cmp", att_cnt = "NULL.Cnt", att_dec = "NULL.Dec", att_det = "NULL.Det",
att_fla = "NULL.Fla", att_ldr = "NULL.Ldr", att_otb = "NULL.OtB", att_pos = "NULL.Pos",
att_tea = "NULL.Tea", att_vis = "NULL.Vis", att_wor = "NULL.Wor", att_acc = "NULL.Acc",
att_agi = "NULL.Agi", att_bal = "NULL.Bal", att_jum = "NULL.Jum", att_nat = "NULL.Nat",
att_pac = "NULL.Pac", att_sta = "NULL.Sta", att_str = "NULL.Str", att_aer = "NULL.Aer",
att_cmd = "NULL.Cmd", att_com = "NULL.Com", att_ecc = "NULL.Ecc", att_han = "NULL.Han",
att_kic = "NULL.Kic", att_1v1 = "NULL.1v1", att_pun = "NULL.Pun", att_ref = "NULL.Ref",
att_tro = "NULL.TRO", att_thr = "NULL.Thr"
)
# Load squad data
parse_squad <- function(path) {
htmlParse(path, encoding = "UTF-8") %>%
readHTMLTable() %>%
as.data.frame() %>%
filter(!if_any(8:50, ~ str_detect(.x, "-"))) %>%
select(
name = "NULL.Name", age = "NULL.Age", height = "NULL.Height", position = "NULL.Position",
foot_right = "NULL.Right.Foot", foot_left = "NULL.Left.Foot", potential = "NULL.PA", att_cor = "NULL.Cor",
att_cro = "NULL.Cro", att_dri = "NULL.Dri", att_fin = "NULL.Fin", att_fir = "NULL.Fir",
att_fre = "NULL.Fre", att_hea = "NULL.Hea", att_lon = "NULL.Lon", att_lth = "NULL.L.Th",
att_mar = "NULL.Mar", att_pas = "NULL.Pas", att_pen = "NULL.Pen", att_tck = "NULL.Tck",
att_tec = "NULL.Tec", att_agg = "NULL.Agg", att_ant = "NULL.Ant", att_bra = "NULL.Bra",
att_cmp = "NULL.Cmp", att_cnt = "NULL.Cnt", att_dec = "NULL.Dec", att_det = "NULL.Det",
att_fla = "NULL.Fla", att_ldr = "NULL.Ldr", att_otb = "NULL.OtB", att_pos = "NULL.Pos",
att_tea = "NULL.Tea", att_vis = "NULL.Vis", att_wor = "NULL.Wor", att_acc = "NULL.Acc",
att_agi = "NULL.Agi", att_bal = "NULL.Bal", att_jum = "NULL.Jum", att_nat = "NULL.Nat",
att_pac = "NULL.Pac", att_sta = "NULL.Sta", att_str = "NULL.Str", att_aer = "NULL.Aer",
att_cmd = "NULL.Cmd", att_com = "NULL.Com", att_ecc = "NULL.Ecc", att_han = "NULL.Han",
att_kic = "NULL.Kic", att_1v1 = "NULL.1v1", att_pun = "NULL.Pun", att_ref = "NULL.Ref",
att_tro = "NULL.TRO", att_thr = "NULL.Thr"
) %>%
mutate(
height = str_remove(height, " cm"),
position = str_replace_all(position, "([A-Z])", " \\1") %>% str_trim(),
across(c(foot_right, foot_left), ~ mapvalues(
.x,
c("Very Weak", "Weak", "Reasonable", "Fairly Strong", "Strong", "Very Strong"),
1:6
)),
across(POSITION_COLS, ~ str_detect(position, .x))
) %>%
type.convert(as.is = TRUE)
}
##### Configuration #####
# ----------------------
library(clue)
library(data.table)
library(tidyverse)
library(XML)
# Constants
ATTRIBUTE_COLS <- 16:62  # Update with actual column indices
POSITION_COLS <- 4:13    # Position boolean columns
FOOT_COLS <- 14:15       # Foot ability columns
CONFIG <- list(
position_penalty = 0.2,
min_foot_rating = 4,
young_age = 21,
potential_divisor = 200,
data_path = "C:/Users/AJEHG/OneDrive/Documents/R/footballManager/"
)
##### Helper Functions #####
# --------------------------
calculate_role_scores <- function(squad, role_attributes) {
# Matrix multiplication for vectorized calculation
squad_matrix <- as.matrix(squad[, ATTRIBUTE_COLS])
role_matrix <- as.matrix(role_attributes[, -1])
# Calculate base scores
scores <- squad_matrix %*% t(role_matrix) /
matrix(colSums(t(role_matrix)), nrow = nrow(squad), ncol = nrow(role_attributes), byrow = TRUE)
# Position suitability adjustments
position_mapping <- list(
gk = "gk_", cd = "cd_", fb = "fb_", dm = "dm_",
wb = "wb_", cm = "cm_", wm = "wm_", am = "am_",
w = "w_", st = "s_"
)
for(i in seq_along(position_mapping)) {
prefix <- position_mapping[[i]]
pos_col <- names(position_mapping)[i]
role_cols <- str_which(colnames(scores), paste0("^", prefix))
scores[, role_cols] <- scores[, role_cols] *
ifelse(squad[[pos_col]], 1, CONFIG$position_penalty)
}
# Footedness adjustments
adjust_foot <- function(scores, foot_side, foot_col) {
foot_roles <- str_which(colnames(scores), foot_side)
scores[, foot_roles] <- scores[, foot_roles] *
ifelse(squad[[foot_col]] >= CONFIG$min_foot_rating, 1, 0)
scores
}
scores <- scores %>%
adjust_foot("_(r|li)$", "foot_right") %>%
adjust_foot("_(l|ri)$", "foot_left")
colnames(scores) <- role_attributes$role_code
bind_cols(squad[, c("name", "age")], as.data.frame(scores))
}
assign_team <- function(data, tactic_roles, team_name = "Team") {
# Expand positions based on tactic requirements
expanded_cols <- tactic_roles %>%
mutate(cols = map2(position, number, ~ rep(.x, .y))) %>%
pull(cols) %>%
unlist()
cost_matrix <- data %>%
select(all_of(expanded_cols)) %>%
as.matrix()
# Hungarian algorithm application
norm_matrix <- cost_matrix + abs(min(cost_matrix)) + 1
if(nrow(norm_matrix) > ncol(norm_matrix)) {
norm_matrix <- cbind(norm_matrix,
matrix(2*max(norm_matrix), nrow = nrow(norm_matrix),
ncol = nrow(norm_matrix) - ncol(norm_matrix)))
}
assignment <- solve_LSAP(norm_matrix, maximum = TRUE)
# Format results
indices <- cbind(seq_along(assignment), assignment)
tibble(
position = expanded_cols[indices[,2]],
name = data$name[indices[,1]],
score = cost_matrix[indices],
team = team_name
) %>%
mutate(position = str_remove(position, "_\\d+$")) %>%
arrange(factor(position, levels = unique(expanded_cols)), desc(score))
}
##### Data Preparation #####
# --------------------------
setwd(CONFIG$data_path)
# Load tactical configuration
tactic_roles <- data.frame(
position = c("gk_sk_d_c", "cd_bpd_d_c", "wb_wb_a_r", "dm_sv_a_c",
"wb_wb_a_l", "w_if_a_ri", "w_if_a_li", "s_af_a_c"),
number = c(1, 3, 1, 2, 1, 1, 1, 1)
)
# Load role attributes
role_attributes <- fread("data/role_attributes.csv", na.strings = c("", "#NA")) %>%
type.convert(as.is = TRUE) %>%
mutate(role_code = str_replace_all(
paste(position, role, mentality, side, sep = "_"),
"([^_])[^_]*", "\\1"
)) %>%
filter(role_code %in% tactic_roles$position) %>%
select(role_code, everything())
# Load squad data
parse_squad <- function(path) {
htmlParse(path, encoding = "UTF-8") %>%
readHTMLTable() %>%
as.data.frame() %>%
filter(!if_any(8:50, ~ str_detect(.x, "-"))) %>%
select(
name = "NULL.Name", age = "NULL.Age", height = "NULL.Height", position = "NULL.Position",
foot_right = "NULL.Right.Foot", foot_left = "NULL.Left.Foot", potential = "NULL.PA", att_cor = "NULL.Cor",
att_cro = "NULL.Cro", att_dri = "NULL.Dri", att_fin = "NULL.Fin", att_fir = "NULL.Fir",
att_fre = "NULL.Fre", att_hea = "NULL.Hea", att_lon = "NULL.Lon", att_lth = "NULL.L.Th",
att_mar = "NULL.Mar", att_pas = "NULL.Pas", att_pen = "NULL.Pen", att_tck = "NULL.Tck",
att_tec = "NULL.Tec", att_agg = "NULL.Agg", att_ant = "NULL.Ant", att_bra = "NULL.Bra",
att_cmp = "NULL.Cmp", att_cnt = "NULL.Cnt", att_dec = "NULL.Dec", att_det = "NULL.Det",
att_fla = "NULL.Fla", att_ldr = "NULL.Ldr", att_otb = "NULL.OtB", att_pos = "NULL.Pos",
att_tea = "NULL.Tea", att_vis = "NULL.Vis", att_wor = "NULL.Wor", att_acc = "NULL.Acc",
att_agi = "NULL.Agi", att_bal = "NULL.Bal", att_jum = "NULL.Jum", att_nat = "NULL.Nat",
att_pac = "NULL.Pac", att_sta = "NULL.Sta", att_str = "NULL.Str", att_aer = "NULL.Aer",
att_cmd = "NULL.Cmd", att_com = "NULL.Com", att_ecc = "NULL.Ecc", att_han = "NULL.Han",
att_kic = "NULL.Kic", att_1v1 = "NULL.1v1", att_pun = "NULL.Pun", att_ref = "NULL.Ref",
att_tro = "NULL.TRO", att_thr = "NULL.Thr"
) %>%
mutate(
height = str_remove(height, " cm"),
position = str_replace_all(position, "([A-Z])", " \\1") %>% str_trim(),
across(c(foot_right, foot_left), ~ mapvalues(
.x,
c("Very Weak", "Weak", "Reasonable", "Fairly Strong", "Strong", "Very Strong"),
1:6
)),
across(POSITION_COLS, ~ str_detect(position, .x))
) %>%
type.convert(as.is = TRUE)
}
source("~/.active-rstudio-document")
